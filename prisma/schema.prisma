generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum RoleType {
  OWNER
  ADMIN
  MANAGER
  MEMBER
  GUEST
}

enum Permission {
  CREATE_ORG
  MANAGE_ORG
  CREATE_PROJECT
  MANAGE_PROJECT
  CREATE_TASK
  MANAGE_TASK
  MANAGE_USERS
  MANAGE_SUBSCRIPTIONS
  READ_ONLY
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  password      String
  fullName      String
  organizations String[] @db.ObjectId
  roles         Role[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Role {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  roleType       RoleType
  permissions    Permission[]
  User           User?         @relation(fields: [userId], references: [id])
  userId         String?       @db.ObjectId
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?       @db.ObjectId
}

model Organization {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  ownerId        String        @db.ObjectId
  members        String[]      @db.ObjectId
  roles          Role[]
  projects       Project[]
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  subscriptionId String?       @db.ObjectId
}

model Subscription {
  id                   String         @id @default(auto()) @map("_id") @db.ObjectId
  stripeSubscriptionId String
  plan                 String
  startDate            DateTime
  endDate              DateTime
  organizationId       String         @db.ObjectId
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  Organization         Organization[]
}

model Project {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  organizationId String       @db.ObjectId
  tasks          Task[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Organization   Organization @relation(fields: [organizationId], references: [id])
}

model Task {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  projectId    String     @db.ObjectId
  assignedToId String?    @db.ObjectId
  status       TaskStatus @default(PENDING)
  dueDate      DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Project      Project    @relation(fields: [projectId], references: [id])
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}
